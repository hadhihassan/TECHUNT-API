everything in js happens inside and execution context

for execution context it consist of two components

1.memory component(variable enviorment)
---------------------------------------

in memory component all the variable and function are stored in the type of key value pairs

2.code component(Thread of exedution) 
-------------------------------------

javascript is a synchronous single threaded language
javascript only can execute one commant at a time


difference between synchronous and single threaded
--------------------------------------------------

Single threaded means that only one thing happens at a time. Synchronous means that if you need to wait for something, then everything stops until the wait is over.


what happens when we run a js programme
the execution context is created


call stack
----------

in call stack in the bottom it has a global execution context.the whole thing in execution context will be stored in global execution context.in js execution context will create inside a execution context.so by the lifo principle the new execution context will be stored above the global execution context and this continues whenever we create a new execution context.whenver the call stack execution context is completed the stack of the execution context will be cleaned



hoisting
--------

in the case of variable if we didnt initialised the variable it just behaves like another variable and it will allocate the memory with a place holder undefined

in case of proper function declaration it will copy the whole code

we can even access these variables and function even before it is actually initially



empty file
----------

empty files are the shortest javascript programme.


window
------

window is a global object which is created along with global execution context.so whenever a javascript programme runs a global object is created global execution context is created and also a this variable is created.

this === window
//true


global space
------------

any code in the javascript which is not inside the function is known as global space




javascript is known as loosely typed language also known as weekly typed language	


scope
-----

where you can access a specific variable or function is known as scope
scope is directly depended on the lexical enviorment


lexical enviorment
------------------

whenever a execution context is created also a lexical enviornment is also created.lexical enviorment is a local memory along with the lexical enviorment of its parent.the child will create a reference of lexical enviorment to parent for accessing the variables in the parent


scope chain
-----------

chain of the lexical enviorment references


let and const
-------------

we cant do hoisting with let and const because it has a separate memory allocation.we cannot access this memory space with out adding a value into it.


temporal dead zone
------------------

the time gap between the let variable was hoisted and initialised



syntax error
------------

if we declare the const variable and initialised it after then it will show a syntax error


type error
----------

if we reassign a value to const then it will show type error


reference error
---------------

if we try hoisting for let variable then it will show reference error.or if we tried to console a variable which is not defined then it will also show reference error


what is a block scoped
----------------------

a block is defined by curly braces.it is also known as compound statement.this is combining multiple javascript as a group.if we have multiple statements then it is better to use block.what all variable and functions we can access only inside in the block


shadowing
---------

if we have same name inside and outside the block thats known as shadowing


illegal shadowing
-----------------

let a = 20;
{
   var a = 20;
}

//so it is not possible it show syntax error.like identifier a has already been declared


closures
--------

a function which is bind together with his lexical enviornment or the function along with its lexical scope 

uses of closures
----------------

1.Module Design Pattern 
2.currying
3.Functions like once
4.memoize
5.Maintaining state in async world 
6.setTimeouts
7.Iterators
8.and many more 


Anonymous function
-------------------

A function without a name is called anonymous function


function statement also known as function declaration
-----------------------------------------------------

function a(){
   console.log("Namasthe javascript");
}

the function which is wrote like this is known as function statement


function expression or anonymous function
-----------------------------------------

var b - function(){
  console.log("Namasthe Javascript");
}

the function which is assigned to a variable is known as function expression


the difference between these two methods is in hoisting


named function expression
-------------------------

var b = function xyz(){
  console.log("Namesthe javascript");
}


what is higher order functions
------------------------------ 

A function which take another function as argument and returns a function from it is known as higher order function

function x(){
   console.log("Namasthe Javascript");
}

function y(x){
   x();
}

//here x is the call back function


map
---

if we want to transform a array into another array we can use map


filter
------

filter functions are actually used to filter the values in array


reduce
------

if we have to take all values in an array and come up with a single output  value


javascript
----------

javascript is a web based programming language used to add interactive behavior to webpages,build web and mobile applications,for game developments and to create command line tools
 

variable
--------

a variable is a container for storing data
  

arithmatic expression
---------------------

arithmatic expression is combination of operands and operators


const 
-----

a variable that cant be changed

math
----

math is an intrinsic object that provides basic mathematics functionality and constants
math.round();
math.floor();
math.ceil();
math.pow(x,2);
math.sqrt();
math.abs();
math.max();
math.min();
math.PI();
math.random();


method chaining
---------------

calling one method after another in one continuous line of code

eg:
let userName = "bro";
let letter = userName.charAt(0).toUpperCase();
console.log(letter);


and / or operator
-----------------

gives us the ability to check more than 1 condition concurrently


not logical operator
--------------------

typically used to reverse a conditions boolean value


while loop
----------

repeat some code while some condition is true potentially infinite


do-while loop
-------------

do something,then check the condition,repeat if condition is true.


for-loop
--------

repeat some code a certain amount of times


//break = breaks out of a loop entirely
//continue = skip an iteration of a loop


nested loop
-----------

a loop inside of another loop

 
ternary operator
----------------

shortcut for an 'if/else statement'
it takes 3 operands

1.a condition with ?
2.expression if True :
3.expresseion if False

condition ? exprIfTrue : exprIfFalse


variable scipe = where a vaiable is accessible

//let = variables are limited to block scope {}
//var = variables are limited to a functions(){}


array
-----

thinkk of it as a varible that can store multiple value
	 

spread operator
---------------

allows an iterable such as an array or string to be expanded in places where zero or more arguments are expected(unpacks the elements) 


rest parameters
---------------

represents an indefinite number of parameters(packs arguments into an array);

in normal case we find sum by

function sum(a,b){
   return a+b;
}

function sum(a,b+c){
   return a+b+c;
}

console.log(sum(1,2));
console.log(sum(1,2,3));


but with rest operation we are using that 

function sum(...numbers){
   let total = 0;
   for(let number of numbers){
      total+=number;
   }
   return total;
}


array.forEach()
---------------

executes a provided callback function once for each array element


Map
---

Object that holds key-value pairs of any data type


objects
-------

A group of properties and methods
//properties = what an object has
//methods = what an object can do
use . to access properties/methods


error
-----

object with a description of something went wrong
//we can handle the error by try catch  
throw executes a user-defined error
finally doesnt check wheather the code is execute or doesnt execute it will work.


synchronous code 
----------------

in an ordered sequence.
step by step linear instructions(start now, finish now)


asynchronous code
-----------------

out of sequence
ex.access a database,fetch a file,tasks that take time(start now,finish sometime later)


promise
-------

object that encapsulates the result of an asynchronous operation let asynchronous methods return values like synchronous methods "I promise to return something in the future"

the state is 'pending' then:'fulfillled' or 'rejected'
the result is what can be returned 
2 parts producing and consuming


ex.
const promise = new Promise((resolve,reject)=>{
   let fileLoaded = true;
   if(fileLoaded){
      resolve("File loaded");
   }else{
      reject("File not loaded");
   }
})

promise.then(value => console.log(value))
       .catch(error => console.log(error))

async
-----

it makes a function retrn a Promise

ex.
async function loadFile(){
   let fileLoaded = true;
   if(fileLoaded){
      return "File loaded";
   }else{
      throw "File not loaded";
   }
}

loadFile().then(value => console.log(value))
          .catch(error => console.log(error))



await 
-----

makes an async function wait for a promise.its no needed to do then and catch by doing await


DOM (Document Object Model(API interface))
------------------------------------------

an interface for changing the content of a page


cookie
------

a small text file stored on your computer used to remember information about the user saved in name = value pairs 


call
----

Using call we call borrow a function to any object to perform a task.the first argument will be the reference of the object the second argument will be the parameter that passed through the function

apply
-----

in apply the argument will pass in the form of array but not the reference

bind
----

bind method is the same as the call method but the only difference is instead of directly calling the method it will bind the method with the object.it will assign to a variable return as a method and we have to print it later and after that we have to invoke that method


ex.
let name = {
  firstname: "Akshay",
  lastname: "Saini"
}

let printFullName = function(hometown,state){
  console.log(this.firstname+" "+this.lastname+" from "+hometown+" , "+state)
}

printFullName.call(name,"Mumbai","Maharashtra");
printFullName.apply(name,["Mumbai","Maharashtra"]);
let printMyName = printFullName.bind(name,"Mumbai","Maharashtra");
printMyname();